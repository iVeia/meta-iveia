stages:
  - build
  - test
  - release
  - deploy

workflow:
  rules:
    # Don't run pipeline on push, user must initiate it, unless tagged release
    - if: $CI_PIPELINE_SOURCE != "push"
    - if: $CI_COMMIT_TAG    

variables:
  IVTEST_REL_PATH: out/ivtest
  IVINSTALL_REL_PATH: out/ivinstall
  IVINSTALL_ABS_PATH: ${CI_PROJECT_DIR}/${IVINSTALL_REL_PATH}
  IVINSTALL_TGT: ivinstall-full

build-job:
  stage: build
  image: ubuntu:18.04
  variables:
    # Need unshallow clone so that `git describe` works for versioning
    GIT_STRATEGY: clone
    GIT_DEPTH: 0

    # Yocto caching: gitlab need to know these to cache between pipeline runs.
    # The vars are passed to make, so make can pass them to the Yocto build.
    DL_DIR: cache/downloads
    SSTATE_DIR: cache/sstate-cache

    # MACHINE list.
    # TODO: add back in MACHINEs that currently have broken builds: 00108
    MACHINES: >-
      00049
      00068
      00090
      00102
      00104
      00114
      00122
      00126
      00127
      00130

    SDKS: >-
      atlas-z7
      atlas-z8

    # These targets need to be rebuilt (if cached) in order to build in the
    # latest version stamp
    CLEAN_TGTS: fsbl-firmware u-boot-xlnx linux-xlnx xilinx-bootbin ${IVINSTALL_TGT}
  timeout: 5h
  cache:
    paths:
      - $DL_DIR
      - $SSTATE_DIR
  tags:
    - docker
  script:
    # Save CI_JOB_URL
    - echo BUILD_JOB_URL=$CI_JOB_URL > vars.env
    
    - apt update
    - apt install -y python python3 python3-distutils
    - apt install -y git curl gcc g++ gawk gnupg locales
    - apt install -y make chrpath cpio wget diffstat texinfo parted xxd
    - locale-gen "en_US.UTF-8"
    - export LANG=en_US.UTF-8

    - curl https://storage.googleapis.com/git-repo-downloads/repo-1 > /usr/local/bin/repo
    - chmod a+rx /usr/local/bin/repo

    # Yocto builds cannot be run as root (the docker default).  All commands below
    # related to the Yocto build are run under a new "builder" user.
    - adduser --disabled-password --gecos "" builder
    # Force user name - required to run git
    - su builder -c 'git config --global user.email "builder@iveia.com"'
    - su builder -c 'git config --global user.name "iVeia Builder"'
    # Prevent repo utility from requesting "Enable color display ...?"
    - su builder -c 'git config --global color.ui false'
    # Fix github deprecation of git:// paths - required to get Xilinx source
    - su builder -c 'git config --global url."https://".insteadOf git://'
    # Required by Yocto build because git dir has different owner (root)
    # than build dir (builder)
    - su builder -c "git config --global --add safe.directory ${CI_PROJECT_DIR}"

    - cd ..
    - rm -rf meta-iveia-project
    - su builder -c "${CI_PROJECT_NAME}/download DONTMOVELAYER"

    - cd meta-iveia-project
    - echo "DL_DIR = \"${CI_PROJECT_DIR}/${DL_DIR}\"" >> build/conf/local.conf
    - echo "SSTATE_DIR = \"${CI_PROJECT_DIR}/${SSTATE_DIR}\"" >> build/conf/local.conf
    - mkdir -p ${IVINSTALL_ABS_PATH}
    - |
      set -v # Required to force display multiline command
      SS="source setupsdk"
      for m in $MACHINES; do
        su builder -c "$SS && MACHINE=$m bitbake -c cleansstate ${CLEAN_TGTS}" || exit 1
        su builder -c "$SS && MACHINE=$m bitbake ${IVINSTALL_TGT}" || exit 1
        cp -v build/tmp/deploy/images/$m/${IVINSTALL_TGT}-$m ${IVINSTALL_ABS_PATH} || exit 1
      done
    - |
      set -v # Required to force display multiline command
      SS="source setupsdk"
      for s in $SDKS; do
        su builder -c "$SS && MACHINE=$s bitbake iveia-image-minimal -c populate_sdk" || exit 1
        IMG_PREFIX=build/tmp/deploy/sdk/petalinux-glibc-x86_64-iveia-image-minimal
        cp -v ${IMG_PREFIX}-*-${s}-toolchain-*.sh ${IVINSTALL_ABS_PATH} || exit 1
      done
    - ls -la ${IVINSTALL_ABS_PATH}

  artifacts:
    paths:
      - ${IVINSTALL_REL_PATH}
    reports:
      dotenv: vars.env

test-job:
  stage: test
  tags:
    - ivtest
  variables:
    TESTPLAN: iveia/nightly
  script:
    # Save CI_JOB_URL
    - echo TEST_JOB_URL=$CI_JOB_URL > vars.env
    
    # Get latest from origin/master, regardless of what we have locally
    - cd ~/ivtest
    - git fetch
    - git reset --hard origin/master

    # link meta-iveia ivinstaller artifacts into ivtest dir
    - rm -rf ivinstall
    - ln -sf ${IVINSTALL_ABS_PATH} ivinstall
    - ls -la ivinstall/

    # Install on all targets, then test all targets, and power everything off
    - ./ivtest -i 0-
    - ./ivtest -d -T 0- testplans/${TESTPLAN}
    - ./ivtest -P 0-
    - grep ^INFO ivlog/latest/logfile

    # Artifacts
    - cp -r ivlog/latest/ ${CI_PROJECT_DIR}/${IVTEST_REL_PATH}

    # Verify zero test failures
    - cat ivlog/latest/fails
    - test $(cat ivlog/latest/fails) == 0

  artifacts:
    when: always
    paths:
      - ${IVTEST_REL_PATH}
    reports:
      dotenv: vars.env

release-job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_TAG    
  script:
    - echo 'Running release-job'
  release:
    tag_name: $CI_COMMIT_TAG
    description: ${IVTEST_REL_PATH}/shortsummary.md
    assets:
       links:
         - name: 'Test Results'
           url: "${TEST_JOB_URL}/artifacts/browse/${IVTEST_REL_PATH}"
         - name: 'Build Artifacts'
           url: "${BUILD_JOB_URL}/artifacts/browse/${IVINSTALL_REL_PATH}"

deploy-job:
  stage: deploy
  tags:
    - nas
  rules:
    - if: $CI_COMMIT_TAG    
  script:
    # Verify NAS mountpoint
    - NAS="$HOME/nas"
    - mountpoint "$NAS"
    - QA_DIR="$HOME/nas/SoftwareQA/ivinstall/$CI_COMMIT_TAG"
    # Create deploy dir and deploy artifacts
    - mkdir -p "$QA_DIR"
    - BROWSE_URL="$CI_PROJECT_URL/-/releases/$CI_COMMIT_TAG"
    - echo "<meta http-equiv='Refresh' content='0; url=$BROWSE_URL' />" > "$QA_DIR/${CI_COMMIT_TAG}.html"
    - cp -r out/* "$QA_DIR"


